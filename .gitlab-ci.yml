---
stages:
  - lint
  - release
  - build
  - deploy

workflow:
  rules:
    - if: '$CI_COMMIT_TAG'
      when: never
    - if: '$CI_COMMIT_MESSAGE =~ /^chore\(release\):.*/'
      when: never
    - if: "'int' == $CI_COMMIT_BRANCH"
      variables:
        NEXT_URL: https://int.gnaumann.de
    - when: always

variables:
  CL_IMAGE: registry.gitlab.com/genaumann/container/commitlint:17.7.1
  NEXT_URL: https://gnaumann.de

include:
  # commitlint
  - project: 'ctbc/commitlint'
    ref: 'v1.3.0'
    file: '/templates/.gitlab-ci-commitlint.yml'

.node-template:
  image: node:18-alpine3.18
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - node_modules/
  before_script:
    - npm i

next-lint:
  stage: lint
  extends: .node-template
  rules:
    - if: $CI_DEFAULT_BRANCH == $CI_COMMIT_BRANCH
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  script:
    - npm run lint

release:
  stage: release
  image: registry.gitlab.com/genaumann/container/semantic-release:21.0.7
  rules:
    - if: $CI_DEFAULT_BRANCH == $CI_COMMIT_BRANCH
  artifacts:
    paths:
      - VERSION
      - package.json
      - package-lock.json
  script:
    - semantic-release

next-build:
  stage: build
  extends: .node-template
  rules:
    - if: $CI_DEFAULT_BRANCH == $CI_COMMIT_BRANCH
      needs:
        - job: release
          artifacts: true
    - if: "'int' == $CI_COMMIT_BRANCH"
  artifacts:
    when: on_success
    expire_in: 2h
    paths:
      - .next
      - public
  script:
    - echo "Building image for ${NEXT_URL}"
    - apk add git
    - npm run build

container-build:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.13.0-debug
    entrypoint: ['']
  rules:
    - if: $CI_DEFAULT_BRANCH == $CI_COMMIT_BRANCH
      needs:
        - job: next-build
          artifacts: true
        - job: release
          artifacts: true
      variables:
        CONTAINER_TAG: latest
    - if: "'int' == $CI_COMMIT_BRANCH"
      needs:
        - job: next-build
          artifacts: true
      variables:
        VERSION: int-$CI_PIPELINE_ID
        CONTAINER_TAG: int
  before_script:
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
  script:
    - if [ ! "$VERSION" ] ; then VERSION=$(cat VERSION) ; else VERSION=$VERSION ; fi
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --build-arg "NEXT_URL=${NEXT_URL}"
      --dockerfile "${CI_PROJECT_DIR}/Containerfile"
      --destination "${CI_REGISTRY}/genaumann/container/gna-web:${VERSION}"
      --destination "${CI_REGISTRY}/genaumann/container/gna-web:${CONTAINER_TAG}"

salt-deploy:
  stage: deploy
  image: registry.gitlab.com/genaumann/salt-api:latest
  environment:
    name: $DEPLOY_ENV
    url: $NEXT_URL
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      needs:
        - job: container-build
          artifacts: false
        - job: release
          artifacts: true
      variables:
        DEPLOY_ENV: production
        CONTAINER_NAME: gnaumann-web
    - if: "'int' == $CI_COMMIT_BRANCH"
      needs:
        - job: container-build
          artifacts: false
      variables:
        DEPLOY_ENV: integration
        CONTAINER_NAME: gnaumann-web-int
        VERSION: int-$CI_PIPELINE_ID
  script:
    - if [ ! "$VERSION" ] ; then VERSION=$(cat VERSION) ; else VERSION=$VERSION ; fi
    - saltleapi -t grain 'role:docker-gnaumann-web' state.apply -a api.gnaumann.web -k pillar="{\"docker\":{\"containers\":{\"${CONTAINER_NAME}\":{\"image\":\"${CI_REGISTRY}/genaumann/container/gna-web:${VERSION}\"}}}}"
